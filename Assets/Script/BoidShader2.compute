// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CalculateNext
#pragma kernel ResetBef
#pragma kernel ResetBef_image


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWTexture2D<float4> Result_bef;


int imageSize;
int imageSize_half;
uint particleNum;

RWStructuredBuffer<int2> neighborCandidate;

int candidateCount;

float cohesionWeight;
float alignmentWeight;
float separationWeight;

float directionSenstivity;

float speed;
int neighborRadius;

float2 mousePosition;
float2 mouseVector;
bool mouseClicked;

struct particle
{
	float2 position;
	float2 direction;
};
RWStructuredBuffer<particle> particles;


uint GetIdx1D(uint2 pos)
{
    return pos.y * imageSize + pos.x;
}

uint2 GetIdx2D(uint idx)
{
    return uint2(idx % (uint)imageSize, idx / (uint)imageSize);
}
float2 ModulusPosition(float2 pos)
{
    pos += ((pos < -imageSize_half)- (pos >= imageSize_half)) * imageSize;
    return pos;
}

int2 ModulusPosition(int2 pos)
{
    pos += ((pos < -imageSize_half) - (pos >= imageSize_half)) * imageSize;
    return pos;
}


RWStructuredBuffer<uint> particle_cellID;
RWStructuredBuffer<uint> particle_cellID_bef;
RWStructuredBuffer<uint> keys;
RWStructuredBuffer<uint> cellStart;
[numthreads(8, 1, 1)]
void CalculateNext(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= particleNum) return;
    particle p = particles[id.x];


    int2 positionInt = round(p.position);
    int neighborCnt = 0;

    float2 coheision = 0;
    float2 alignment = 0;
    float2 separation = 0;
    float2 additional = mouseVector;//(mousePosition - p.position);
    float2 additional2 = mousePosition - p.position;//(mousePosition - p.position);
    float fromMouseDistance = length(additional2);

    bool areaCheck_in = (fromMouseDistance <= 5 * 5 * imageSize / 1024.0);
    float areaCheck_out = 1 / pow(fromMouseDistance, 2) * 1000;//(fromMouseDistance <= neighborRadius * 30 * imageSize / 1024.0);
    additional *= mouseClicked * areaCheck_in; /*/ length(additional)*/;
    additional2 *= mouseClicked * (areaCheck_in * 2 - 1) * areaCheck_out;
    for (int i = 0; i < candidateCount; i++)
    {

        int2 nPosition = ModulusPosition(positionInt + neighborCandidate[i]);

        // Get 1dim cell index
        uint cellIdx = GetIdx1D(nPosition + imageSize_half);

        // Get 
        uint keyIdx = cellStart[cellIdx];
        if (keyIdx == (uint)4294967295) continue;

        uint cellPos = particle_cellID_bef[keys[keyIdx]];
        uint cnt = 0;

        float2 disp = nPosition - (positionInt + neighborCandidate[i]);
        for (; cellPos == particle_cellID_bef[keys[keyIdx]] && cnt < 10; keyIdx++, cnt++)
        {
            if (keys[keyIdx] == id.x) continue;
            particle neighbor = particles[keys[keyIdx]];
            float2 sep = p.position - neighbor.position + disp;
            if (length(sep) <= neighborRadius)
            {
                coheision += neighbor.position - disp;
                alignment += neighbor.direction;

                separation += normalize(sep) / length(sep);
                neighborCnt++;
            }
        }
    }

    if (neighborCnt > 0)
    {
        coheision = normalize(coheision / neighborCnt - p.position);
        alignment = normalize(alignment / neighborCnt);
        separation = normalize(separation / neighborCnt);
        float2 targetVec = coheision * cohesionWeight + alignment * alignmentWeight + separation * separationWeight;

        if (length(targetVec) > 0)
        {
            targetVec = normalize(targetVec);
            p.direction = lerp(p.direction, targetVec, directionSenstivity);//normalize(p.direction + targetVec);//normalize(lerp(p.direction, targetVec, 0.05));
        }
    }


    if(speed != 0)
        p.direction += (additional * 30 * imageSize / 1024.0 - additional2) / speed * 0.005;
    p.position += p.direction * speed;
    p.position = ModulusPosition(p.position);
    particles[id.x] = p;

    int2 resultPosition = round(p.position + imageSize_half);

    particle_cellID[id.x] = GetIdx1D(resultPosition);

    float4 result = lerp(float4(1, 0.75, 0.75, 1), float4(0.75, 0.75, 1, 1), normalize(p.direction).y + 0.5);
    //float4 result =lerp(float4(1, 0.4, 0.4, 1), float4(0.4, 0.4, 1, 1), neighborCnt / 5.0);
    
    /*if (mouseClicked && fromMouseDistance <= neighborRadius * 20)
    {
        result.xyz = lerp(result.xyz, 1, fromMouseDistance / (neighborRadius * 10));
    }*/
    result.xyz *= clamp(0.4, 1.5, neighborCnt / 70.0 * particleNum / 131072.0 * imageSize / 1024.0);//clamp(neighborCnt / 20.0, 0, 1);
    //result.y = lerp(0.5, 1, neighborCnt / 10.0);//lerp(0.5, 1, p.direction.x + 0.5);
    //result = sqrt(result);
    Result[resultPosition] = result;//float4(p.direction.x + 0.5, 1, p.direction.y + 0.5, 1);

}

[numthreads(8, 8, 1)]
void ResetBef_image(uint3 id : SV_DispatchThreadID)
{
    if (any(id.xy) >= imageSize) return;
    Result_bef[id.xy] = Result[id.xy];
    Result[id.xy] = lerp(Result[id.xy], float4(0, 0, 0, 1)/*float4(0.1, 0, 0.5, 1)*/, 0.2);
    cellStart[GetIdx1D(id.xy)] = 4294967295;
    // TODO: insert actual code here!

    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}


[numthreads(8, 1, 1)]
void ResetBef(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= particleNum) return;
    particle_cellID_bef[id.x] = particle_cellID[id.x];
    particle_cellID[id.x] = 4294967295;

    
    // TODO: insert actual code here!

    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}